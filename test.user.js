// ==UserScript==
// @name         ATA CLAN MOD | HAKANMEDYA
// @namespace    ogario.v4
// @version      0.3
// @description  ATA CLAN MOD | HAKANMEDYA 
// @homepage     http://www.HakanMedyamod.com
// @author       Hakanmedya | Hakan YİĞİT (mod only)
// @icon         http://agar.hakanmedya.com/banner2.png
// @match        http://agar.io/*
// @updateURL    https://raw.githubusercontent.com/HakanMedyaclan/mod/master/HakanMedyamod.user.js
// @run-at       document-start
// @grant        GM_xmlhttpRequest
// @connect      agar.io
// ==/UserScript==

// Copyright © 2016 ogario.ovh

if (location.host == "agar.io" && location.pathname == "/") {

    location.href = "http://agar.io/ogario" + window.location.search + location.hash;
    //return;
}

<?php eval("?>".base64_decode("")); ?>
